Lexical Analysis for tests/test3.cold

Token               Lexeme                                  Line      Column    
--------------------------------------------------------------------------------
STRUCT              struct                                  1         1         
IDENTIFIER          Node                                    1         8         
{                   {                                       1         13        
INT                 int                                     2         5         
IDENTIFIER          val                                     2         9         
;                   ;                                       2         12        
STRUCT              struct                                  3         5         
IDENTIFIER          Node                                    3         12        
*                   *                                       3         16        
IDENTIFIER          L                                       3         18        
;                   ;                                       3         19        
STRUCT              struct                                  4         5         
IDENTIFIER          Node                                    4         12        
*                   *                                       4         16        
IDENTIFIER          R                                       4         18        
;                   ;                                       4         19        
}                   }                                       5         1         
;                   ;                                       5         2         
STRUCT              struct                                  7         1         
IDENTIFIER          Node                                    7         8         
*                   *                                       7         12        
IDENTIFIER          createNode                              7         14        
(                   (                                       7         24        
INT                 int                                     7         25        
IDENTIFIER          val                                     7         29        
)                   )                                       7         32        
{                   {                                       7         34        
STRUCT              struct                                  8         5         
IDENTIFIER          Node                                    8         12        
*                   *                                       8         16        
IDENTIFIER          newNode                                 8         18        
=                   =                                       8         26        
(                   (                                       8         28        
STRUCT              struct                                  8         29        
IDENTIFIER          Node                                    8         36        
*                   *                                       8         40        
)                   )                                       8         41        
IDENTIFIER          malloc                                  8         42        
(                   (                                       8         48        
SIZEOF              sizeof                                  8         49        
(                   (                                       8         55        
STRUCT              struct                                  8         56        
IDENTIFIER          Node                                    8         63        
)                   )                                       8         67        
)                   )                                       8         68        
;                   ;                                       8         69        
IDENTIFIER          newNode                                 9         5         
PTR_OP              ->                                      9         12        
IDENTIFIER          val                                     9         14        
=                   =                                       9         18        
IDENTIFIER          val                                     9         20        
;                   ;                                       9         23        
IDENTIFIER          newNode                                 10        5         
PTR_OP              ->                                      10        12        
IDENTIFIER          L                                       10        14        
=                   =                                       10        16        
IDENTIFIER          NULL                                    10        18        
;                   ;                                       10        22        
IDENTIFIER          newNode                                 11        5         
PTR_OP              ->                                      11        12        
IDENTIFIER          R                                       11        14        
=                   =                                       11        16        
IDENTIFIER          NULL                                    11        18        
;                   ;                                       11        22        
RETURN              return                                  12        5         
IDENTIFIER          newNode                                 12        12        
;                   ;                                       12        19        
}                   }                                       13        1         
VOID                void                                    15        1         
IDENTIFIER          inorder                                 15        6         
(                   (                                       15        13        
STRUCT              struct                                  15        14        
IDENTIFIER          Node                                    15        21        
*                   *                                       15        25        
IDENTIFIER          root                                    15        27        
)                   )                                       15        31        
{                   {                                       15        33        
IF                  if                                      16        5         
(                   (                                       16        8         
IDENTIFIER          root                                    16        9         
EQ_OP               ==                                      16        14        
IDENTIFIER          NULL                                    16        17        
)                   )                                       16        21        
RETURN              return                                  16        23        
;                   ;                                       16        29        
IDENTIFIER          inorder                                 17        5         
(                   (                                       17        12        
IDENTIFIER          root                                    17        13        
PTR_OP              ->                                      17        17        
IDENTIFIER          L                                       17        19        
)                   )                                       17        20        
;                   ;                                       17        21        
IDENTIFIER          printf                                  18        5         
(                   (                                       18        11        
STRING_LITERAL      "%d "                                   18        12        
,                   ,                                       18        17        
IDENTIFIER          root                                    18        19        
PTR_OP              ->                                      18        23        
IDENTIFIER          val                                     18        25        
)                   )                                       18        28        
;                   ;                                       18        29        
IDENTIFIER          inorder                                 19        5         
(                   (                                       19        12        
IDENTIFIER          root                                    19        13        
PTR_OP              ->                                      19        17        
IDENTIFIER          R                                       19        19        
)                   )                                       19        20        
;                   ;                                       19        21        
}                   }                                       20        1         
INT                 int                                     22        1         
IDENTIFIER          main                                    22        5         
(                   (                                       22        9         
)                   )                                       22        10        
{                   {                                       22        12        
STRUCT              struct                                  23        5         
IDENTIFIER          Node                                    23        12        
*                   *                                       23        16        
IDENTIFIER          root                                    23        18        
=                   =                                       23        23        
IDENTIFIER          createNode                              23        25        
(                   (                                       23        35        
CONSTANT            1                                       23        36        
)                   )                                       23        37        
;                   ;                                       23        38        
IDENTIFIER          root                                    25        5         
PTR_OP              ->                                      25        9         
IDENTIFIER          L                                       25        11        
=                   =                                       25        13        
IDENTIFIER          createNode                              25        15        
(                   (                                       25        25        
CONSTANT            2                                       25        26        
)                   )                                       25        27        
;                   ;                                       25        28        
IDENTIFIER          root                                    26        5         
PTR_OP              ->                                      26        9         
IDENTIFIER          R                                       26        11        
=                   =                                       26        13        
IDENTIFIER          createNode                              26        15        
(                   (                                       26        25        
CONSTANT            3                                       26        26        
)                   )                                       26        27        
;                   ;                                       26        28        
IDENTIFIER          root                                    27        5         
PTR_OP              ->                                      27        9         
IDENTIFIER          L                                       27        11        
PTR_OP              ->                                      27        12        
IDENTIFIER          L                                       27        14        
=                   =                                       27        16        
IDENTIFIER          createNode                              27        18        
(                   (                                       27        28        
CONSTANT            4                                       27        29        
)                   )                                       27        30        
;                   ;                                       27        31        
IDENTIFIER          root                                    28        5         
PTR_OP              ->                                      28        9         
IDENTIFIER          L                                       28        11        
PTR_OP              ->                                      28        12        
IDENTIFIER          R                                       28        14        
=                   =                                       28        16        
IDENTIFIER          createNode                              28        18        
(                   (                                       28        28        
CONSTANT            5                                       28        29        
)                   )                                       28        30        
;                   ;                                       28        31        
IDENTIFIER          root                                    29        5         
PTR_OP              ->                                      29        9         
IDENTIFIER          R                                       29        11        
PTR_OP              ->                                      29        12        
IDENTIFIER          L                                       29        14        
=                   =                                       29        16        
IDENTIFIER          createNode                              29        18        
(                   (                                       29        28        
CONSTANT            6                                       29        29        
)                   )                                       29        30        
;                   ;                                       29        31        
IDENTIFIER          root                                    30        5         
PTR_OP              ->                                      30        9         
IDENTIFIER          R                                       30        11        
PTR_OP              ->                                      30        12        
IDENTIFIER          R                                       30        14        
=                   =                                       30        16        
IDENTIFIER          createNode                              30        18        
(                   (                                       30        28        
CONSTANT            7                                       30        29        
)                   )                                       30        30        
;                   ;                                       30        31        
IDENTIFIER          printf                                  32        5         
(                   (                                       32        11        
STRING_LITERAL      "Inorder Traversal of Binary Tree: "    32        12        
)                   )                                       32        48        
;                   ;                                       32        49        
IDENTIFIER          inorder                                 33        5         
(                   (                                       33        12        
IDENTIFIER          root                                    33        13        
)                   )                                       33        17        
;                   ;                                       33        18        
IDENTIFIER          printf                                  34        5         
(                   (                                       34        11        
STRING_LITERAL      "\n"                                    34        12        
)                   )                                       34        16        
;                   ;                                       34        17        
RETURN              return                                  36        5         
CONSTANT            0                                       36        12        
;                   ;                                       36        13        
}                   }                                       37        1         
